import { __read, __spread } from "tslib";
import { BezierEasing } from "./bezierEasing";
var requestAnimationFrame;
if (typeof window !== 'undefined') {
    requestAnimationFrame = window.requestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.msRequestAnimationFrame;
}
var totalIterations = 95;
var circlesInterval = 14;
var restartInterval = 250;
var stopRotationAt = totalIterations * 2 / 1.02;
var easing = BezierEasing(0, 0.47, 0.9, .25);
var bounding = 68;
var ids = [];
var animations = {};
function rotateCircle(circles) {
    var lastFrame = false;
    for (var i = 0, len = circles.length; i < len; ++i) {
        if (this.iteration >= circlesInterval * i) {
            var iteration = this.iteration - circlesInterval * i;
            var revolution = Math.floor(iteration / totalIterations);
            iteration = iteration - (revolution * totalIterations);
            if (iteration < 0) {
                iteration = totalIterations - iteration;
            }
            else if (iteration > totalIterations) {
                iteration = iteration - totalIterations;
            }
            if (iteration + (revolution * totalIterations) > stopRotationAt) {
                circles[i].setAttributeNS('', 'fill-opacity', '0');
                if (i === circles.length - 1) {
                    lastFrame = true;
                }
            }
            else {
                var value = easing.get(1 / totalIterations * iteration) * 2 * Math.PI * -1;
                circles[i].setAttributeNS('', 'fill-opacity', '1');
                circles[i].setAttributeNS('', 'cx', 75 + (bounding * Math.sin(value)) + '');
                circles[i].setAttributeNS('', 'cy', 75 + (bounding * Math.cos(value)) + '');
            }
        }
    }
    this.iteration++;
    if (!lastFrame) {
        animations[this.id] = ['animationFrame', requestAnimationFrame(rotateCircle.bind(this, circles))];
    }
    else {
        animations[this.id] = ['timeout', window.setTimeout(startAnimation.bind.apply(startAnimation, __spread([null], circles)), restartInterval)];
    }
}
export function startAnimation() {
    var elements = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        elements[_i] = arguments[_i];
    }
    var id = 0;
    if (ids.length) {
        id = ids[ids.length - 1] + 1;
    }
    ids.push(id);
    if (requestAnimationFrame) {
        rotateCircle.apply({ iteration: 0, currentIteration: 0, id: id }, [elements]);
    }
    return id;
}
export function stopAnimation(animation) {
    if (animations[animation][0] === 'timeout') {
        window.clearTimeout(animations[animation][1]);
    }
    else {
        window.cancelAnimationFrame(animations[animation][1]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NDaXJjbGVBbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZGVza3RvcC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3Byb2dyZXNzLWNpcmNsZS9wcm9ncmVzc0NpcmNsZUFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBSTVDLElBQUkscUJBQXFCLENBQUM7QUFDMUIsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7SUFDakMscUJBQXFCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQjtRQUNsRCxNQUFNLENBQUMsd0JBQXdCO1FBQy9CLE1BQU0sQ0FBQywyQkFBMkI7UUFDbEMsTUFBTSxDQUFDLHVCQUF1QixDQUFDO0NBQ2xDO0FBRUQsSUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBQzNCLElBQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUMzQixJQUFNLGVBQWUsR0FBRyxHQUFHLENBQUM7QUFDNUIsSUFBTSxjQUFjLEdBQUcsZUFBZSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbEQsSUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQy9DLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUVwQixJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDZixJQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFFdEIsU0FBUyxZQUFZLENBQUMsT0FBTztJQUMzQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNsRCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksZUFBZSxH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LFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDekU7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLFNBQVM7SUFDckMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQzFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0M7U0FBTTtRQUNMLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0JlemllckVhc2luZ30gZnJvbSBcIi4vYmV6aWVyRWFzaW5nXCI7XHJcblxyXG5kZWNsYXJlIGNvbnN0IHdpbmRvdztcclxuXHJcbmxldCByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZTtcclxufVxyXG5cclxuY29uc3QgdG90YWxJdGVyYXRpb25zID0gOTU7XHJcbmNvbnN0IGNpcmNsZXNJbnRlcnZhbCA9IDE0O1xyXG5jb25zdCByZXN0YXJ0SW50ZXJ2YWwgPSAyNTA7XHJcbmNvbnN0IHN0b3BSb3RhdGlvbkF0ID0gdG90YWxJdGVyYXRpb25zICogMiAvIDEuMDI7XHJcbmNvbnN0IGVhc2luZyA9IEJlemllckVhc2luZygwLCAwLjQ3LCAwLjksIC4yNSk7XHJcbmNvbnN0IGJvdW5kaW5nID0gNjg7XHJcblxyXG5jb25zdCBpZHMgPSBbXTtcclxuY29uc3QgYW5pbWF0aW9ucyA9IHt9O1xyXG5cclxuZnVuY3Rpb24gcm90YXRlQ2lyY2xlKGNpcmNsZXMpIHtcclxuICBsZXQgbGFzdEZyYW1lID0gZmFsc2U7XHJcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNpcmNsZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgIGlmICh0aGlzLml0ZXJhdGlvbiA+PSBjaXJjbGVzSW50ZXJ2YWwgKiBpKSB7XHJcbiAgICAgIGxldCBpdGVyYXRpb24gPSB0aGlzLml0ZXJhdGlvbiAtIGNpcmNsZXNJbnRlcnZhbCAqIGk7XHJcbiAgICAgIGNvbnN0IHJldm9sdXRpb24gPSBNYXRoLmZsb29yKGl0ZXJhdGlvbiAvIHRvdGFsSXRlcmF0aW9ucyk7XHJcbiAgICAgIGl0ZXJhdGlvbiA9IGl0ZXJhdGlvbiAtIChyZXZvbHV0aW9uICogdG90YWxJdGVyYXRpb25zKTtcclxuICAgICAgaWYgKGl0ZXJhdGlvbiA8IDApIHtcclxuICAgICAgICBpdGVyYXRpb24gPSB0b3RhbEl0ZXJhdGlvbnMgLSBpdGVyYXRpb247XHJcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0aW9uID4gdG90YWxJdGVyYXRpb25zKSB7XHJcbiAgICAgICAgaXRlcmF0aW9uID0gaXRlcmF0aW9uIC0gdG90YWxJdGVyYXRpb25zO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVyYXRpb24gKyAocmV2b2x1dGlvbiAqIHRvdGFsSXRlcmF0aW9ucykgPiBzdG9wUm90YXRpb25BdCkge1xyXG4gICAgICAgIGNpcmNsZXNbaV0uc2V0QXR0cmlidXRlTlMoJycsICdmaWxsLW9wYWNpdHknLCAnMCcpO1xyXG4gICAgICAgIGlmIChpID09PSBjaXJjbGVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGxhc3RGcmFtZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZWFzaW5nLmdldCgxIC8gdG90YWxJdGVyYXRpb25zICogaXRlcmF0aW9uKSAqIDIgKiBNYXRoLlBJICogLTE7XHJcbiAgICAgICAgY2lyY2xlc1tpXS5zZXRBdHRyaWJ1dGVOUygnJywgJ2ZpbGwtb3BhY2l0eScsICcxJyk7XHJcbiAgICAgICAgY2lyY2xlc1tpXS5zZXRBdHRyaWJ1dGVOUygnJywgJ2N4JywgNzUgKyAoYm91bmRpbmcgKiBNYXRoLnNpbih2YWx1ZSkpICsgJycpO1xyXG4gICAgICAgIGNpcmNsZXNbaV0uc2V0QXR0cmlidXRlTlMoJycsICdjeScsIDc1ICsgKGJvdW5kaW5nICogTWF0aC5jb3ModmFsdWUpKSArICcnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5pdGVyYXRpb24rKztcclxuICBpZiAoIWxhc3RGcmFtZSkge1xyXG4gICAgYW5pbWF0aW9uc1t0aGlzLmlkXSA9IFsnYW5pbWF0aW9uRnJhbWUnLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocm90YXRlQ2lyY2xlLmJpbmQodGhpcywgY2lyY2xlcykpXTtcclxuICB9IGVsc2Uge1xyXG4gICAgYW5pbWF0aW9uc1t0aGlzLmlkXSA9IFsndGltZW91dCcsIHdpbmRvdy5zZXRUaW1lb3V0KHN0YXJ0QW5pbWF0aW9uLmJpbmQobnVsbCwgLi4uY2lyY2xlcyksIHJlc3RhcnRJbnRlcnZhbCldO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKC4uLmVsZW1lbnRzKSB7XHJcbiAgbGV0IGlkID0gMDtcclxuICBpZiAoaWRzLmxlbmd0aCkge1xyXG4gICAgaWQgPSBpZHNbaWRzLmxlbmd0aCAtIDFdICsgMTtcclxuICB9XHJcbiAgaWRzLnB1c2goaWQpO1xyXG4gIGlmIChyZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcclxuICAgIHJvdGF0ZUNpcmNsZS5hcHBseSh7aXRlcmF0aW9uOiAwLCBjdXJyZW50SXRlcmF0aW9uOiAwLCBpZH0sIFtlbGVtZW50c10pO1xyXG4gIH1cclxuICByZXR1cm4gaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wQW5pbWF0aW9uKGFuaW1hdGlvbikge1xyXG4gIGlmIChhbmltYXRpb25zW2FuaW1hdGlvbl1bMF0gPT09ICd0aW1lb3V0Jykge1xyXG4gICAgd2luZG93LmNsZWFyVGltZW91dChhbmltYXRpb25zW2FuaW1hdGlvbl1bMV0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uc1thbmltYXRpb25dWzFdKTtcclxuICB9XHJcbn1cclxuIl19