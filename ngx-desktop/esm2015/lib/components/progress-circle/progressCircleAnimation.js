import { BezierEasing } from "./bezierEasing";
let requestAnimationFrame;
if (typeof window !== 'undefined') {
    requestAnimationFrame = window.requestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.msRequestAnimationFrame;
}
const totalIterations = 95;
const circlesInterval = 14;
const restartInterval = 250;
const stopRotationAt = totalIterations * 2 / 1.02;
const easing = BezierEasing(0, 0.47, 0.9, .25);
const bounding = 68;
const ids = [];
const animations = {};
function rotateCircle(circles) {
    let lastFrame = false;
    for (let i = 0, len = circles.length; i < len; ++i) {
        if (this.iteration >= circlesInterval * i) {
            let iteration = this.iteration - circlesInterval * i;
            const revolution = Math.floor(iteration / totalIterations);
            iteration = iteration - (revolution * totalIterations);
            if (iteration < 0) {
                iteration = totalIterations - iteration;
            }
            else if (iteration > totalIterations) {
                iteration = iteration - totalIterations;
            }
            if (iteration + (revolution * totalIterations) > stopRotationAt) {
                circles[i].setAttributeNS('', 'fill-opacity', '0');
                if (i === circles.length - 1) {
                    lastFrame = true;
                }
            }
            else {
                const value = easing.get(1 / totalIterations * iteration) * 2 * Math.PI * -1;
                circles[i].setAttributeNS('', 'fill-opacity', '1');
                circles[i].setAttributeNS('', 'cx', 75 + (bounding * Math.sin(value)) + '');
                circles[i].setAttributeNS('', 'cy', 75 + (bounding * Math.cos(value)) + '');
            }
        }
    }
    this.iteration++;
    if (!lastFrame) {
        animations[this.id] = ['animationFrame', requestAnimationFrame(rotateCircle.bind(this, circles))];
    }
    else {
        animations[this.id] = ['timeout', window.setTimeout(startAnimation.bind(null, ...circles), restartInterval)];
    }
}
export function startAnimation(...elements) {
    let id = 0;
    if (ids.length) {
        id = ids[ids.length - 1] + 1;
    }
    ids.push(id);
    if (requestAnimationFrame) {
        rotateCircle.apply({ iteration: 0, currentIteration: 0, id }, [elements]);
    }
    return id;
}
export function stopAnimation(animation) {
    if (animations[animation][0] === 'timeout') {
        window.clearTimeout(animations[animation][1]);
    }
    else {
        window.cancelAnimationFrame(animations[animation][1]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NDaXJjbGVBbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZGVza3RvcC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3Byb2dyZXNzLWNpcmNsZS9wcm9ncmVzc0NpcmNsZUFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFJNUMsSUFBSSxxQkFBcUIsQ0FBQztBQUMxQixJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNqQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMscUJBQXFCO1FBQ2xELE1BQU0sQ0FBQyx3QkFBd0I7UUFDL0IsTUFBTSxDQUFDLDJCQUEyQjtRQUNsQyxNQUFNLENBQUMsdUJBQXVCLENBQUM7Q0FDbEM7QUFFRCxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFDM0IsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBQzNCLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQztBQUM1QixNQUFNLGNBQWMsR0FBRyxlQUFlLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNsRCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDL0MsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBRXBCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNmLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUV0QixTQUFTLFlBQVksQ0FBQyxPQUFPO0lBQzNCLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2xELElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxlQUFlLEdB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O0FBQ1osQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsU0FBUztJQUNyQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDMUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMvQztTQUFNO1FBQ0wsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZEO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmV6aWVyRWFzaW5nfSBmcm9tIFwiLi9iZXppZXJFYXNpbmdcIjtcclxuXHJcbmRlY2xhcmUgY29uc3Qgd2luZG93O1xyXG5cclxubGV0IHJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xyXG59XHJcblxyXG5jb25zdCB0b3RhbEl0ZXJhdGlvbnMgPSA5NTtcclxuY29uc3QgY2lyY2xlc0ludGVydmFsID0gMTQ7XHJcbmNvbnN0IHJlc3RhcnRJbnRlcnZhbCA9IDI1MDtcclxuY29uc3Qgc3RvcFJvdGF0aW9uQXQgPSB0b3RhbEl0ZXJhdGlvbnMgKiAyIC8gMS4wMjtcclxuY29uc3QgZWFzaW5nID0gQmV6aWVyRWFzaW5nKDAsIDAuNDcsIDAuOSwgLjI1KTtcclxuY29uc3QgYm91bmRpbmcgPSA2ODtcclxuXHJcbmNvbnN0IGlkcyA9IFtdO1xyXG5jb25zdCBhbmltYXRpb25zID0ge307XHJcblxyXG5mdW5jdGlvbiByb3RhdGVDaXJjbGUoY2lyY2xlcykge1xyXG4gIGxldCBsYXN0RnJhbWUgPSBmYWxzZTtcclxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2lyY2xlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgaWYgKHRoaXMuaXRlcmF0aW9uID49IGNpcmNsZXNJbnRlcnZhbCAqIGkpIHtcclxuICAgICAgbGV0IGl0ZXJhdGlvbiA9IHRoaXMuaXRlcmF0aW9uIC0gY2lyY2xlc0ludGVydmFsICogaTtcclxuICAgICAgY29uc3QgcmV2b2x1dGlvbiA9IE1hdGguZmxvb3IoaXRlcmF0aW9uIC8gdG90YWxJdGVyYXRpb25zKTtcclxuICAgICAgaXRlcmF0aW9uID0gaXRlcmF0aW9uIC0gKHJldm9sdXRpb24gKiB0b3RhbEl0ZXJhdGlvbnMpO1xyXG4gICAgICBpZiAoaXRlcmF0aW9uIDwgMCkge1xyXG4gICAgICAgIGl0ZXJhdGlvbiA9IHRvdGFsSXRlcmF0aW9ucyAtIGl0ZXJhdGlvbjtcclxuICAgICAgfSBlbHNlIGlmIChpdGVyYXRpb24gPiB0b3RhbEl0ZXJhdGlvbnMpIHtcclxuICAgICAgICBpdGVyYXRpb24gPSBpdGVyYXRpb24gLSB0b3RhbEl0ZXJhdGlvbnM7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZXJhdGlvbiArIChyZXZvbHV0aW9uICogdG90YWxJdGVyYXRpb25zKSA+IHN0b3BSb3RhdGlvbkF0KSB7XHJcbiAgICAgICAgY2lyY2xlc1tpXS5zZXRBdHRyaWJ1dGVOUygnJywgJ2ZpbGwtb3BhY2l0eScsICcwJyk7XHJcbiAgICAgICAgaWYgKGkgPT09IGNpcmNsZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgbGFzdEZyYW1lID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlYXNpbmcuZ2V0KDEgLyB0b3RhbEl0ZXJhdGlvbnMgKiBpdGVyYXRpb24pICogMiAqIE1hdGguUEkgKiAtMTtcclxuICAgICAgICBjaXJjbGVzW2ldLnNldEF0dHJpYnV0ZU5TKCcnLCAnZmlsbC1vcGFjaXR5JywgJzEnKTtcclxuICAgICAgICBjaXJjbGVzW2ldLnNldEF0dHJpYnV0ZU5TKCcnLCAnY3gnLCA3NSArIChib3VuZGluZyAqIE1hdGguc2luKHZhbHVlKSkgKyAnJyk7XHJcbiAgICAgICAgY2lyY2xlc1tpXS5zZXRBdHRyaWJ1dGVOUygnJywgJ2N5JywgNzUgKyAoYm91bmRpbmcgKiBNYXRoLmNvcyh2YWx1ZSkpICsgJycpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLml0ZXJhdGlvbisrO1xyXG4gIGlmICghbGFzdEZyYW1lKSB7XHJcbiAgICBhbmltYXRpb25zW3RoaXMuaWRdID0gWydhbmltYXRpb25GcmFtZScsIHJlcXVlc3RBbmltYXRpb25GcmFtZShyb3RhdGVDaXJjbGUuYmluZCh0aGlzLCBjaXJjbGVzKSldO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBhbmltYXRpb25zW3RoaXMuaWRdID0gWyd0aW1lb3V0Jywgd2luZG93LnNldFRpbWVvdXQoc3RhcnRBbmltYXRpb24uYmluZChudWxsLCAuLi5jaXJjbGVzKSwgcmVzdGFydEludGVydmFsKV07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRBbmltYXRpb24oLi4uZWxlbWVudHMpIHtcclxuICBsZXQgaWQgPSAwO1xyXG4gIGlmIChpZHMubGVuZ3RoKSB7XHJcbiAgICBpZCA9IGlkc1tpZHMubGVuZ3RoIC0gMV0gKyAxO1xyXG4gIH1cclxuICBpZHMucHVzaChpZCk7XHJcbiAgaWYgKHJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xyXG4gICAgcm90YXRlQ2lyY2xlLmFwcGx5KHtpdGVyYXRpb246IDAsIGN1cnJlbnRJdGVyYXRpb246IDAsIGlkfSwgW2VsZW1lbnRzXSk7XHJcbiAgfVxyXG4gIHJldHVybiBpZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BBbmltYXRpb24oYW5pbWF0aW9uKSB7XHJcbiAgaWYgKGFuaW1hdGlvbnNbYW5pbWF0aW9uXVswXSA9PT0gJ3RpbWVvdXQnKSB7XHJcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFuaW1hdGlvbnNbYW5pbWF0aW9uXVsxXSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25zW2FuaW1hdGlvbl1bMV0pO1xyXG4gIH1cclxufVxyXG4iXX0=